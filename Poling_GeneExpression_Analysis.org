* RNA-Seq analysis

** PCA analysis
#+begin_src R :session *R* :eval yes :exports code :tangle ./src/PCA_analysis.R
#Used package
library(ggplot2)

#Open filtered counts table
count = read.table("FilteredValues.txt", header=T, row.names = 1, sep="\t", check.names = FALSE)

#Group setup
Adult <- grep("Adult",colnames(count),ignore.case=T)
Infant <- grep("Infant",colnames(count),ignore.case=T)
Spring <- grep("Spring",colnames(count),ignore.case=T)
tHIO <- grep("tHIO",colnames(count),ignore.case=T)
group <- as.factor(c(rep("Adult",times=length(Adult)), rep("Infant",times=length(Infant)), rep("Spring",times=length(Spring)), rep("tHIO",times=length(tHIO))))

#Compute PCA
pca <- prcomp(t(count),scale=TRUE,center=TRUE)
scores <- data.frame(colnames(count), pca$x[,1:ncol(pca$x)],group)

#Get proportion of variance explained per component
summary(pca) #Add PC1 and PC2 proportion of variance explained to PCA axis titles

#Set plot theme
theme <- theme(legend.position="bottom",
        legend.title=element_blank(),
        legend.background = element_rect(fill="white", size=.5, linetype="dotted"),
        panel.background = element_rect(fill = "white", colour = "black"),
        panel.grid.minor=element_blank(),
        panel.grid.major=element_blank())

#Plot PCA with pre-defined theme
qplot(x=PC1, y=PC2, data=scores) +
        theme +
        scale_fill_manual(values=c("#F5EA14", "#FBF7C9", "#8A4B9C", "#E5CBE2")) +
        geom_point(shape=21,aes(fill=factor(group)), size=5)  +
        xlim(-150, 150) +
        ylim(-150, 150) +
        labs(x = "PC1 (36.14%)", y = "PC2 (17.33%)")

ggsave("PCA_Plot.png", plot = last_plot(), width = 10, height = 10, units = "cm",
          dpi = 300)
#+END_SRC
[[./Data/gene_analysis/PCA_Plot.png]]

** Clustering and correlation analysis
#+begin_src R :session *R* :eval yes :exports code :tangle ./src/Correlation_analysis.R
#Used packages
library(ggplot2)
library(reshape2)
library(ggdendrogram)

#Open filtered counts table
cormat <- read.table("CorMatrix.txt", header=T, sep="\t", check.names = FALSE, row.names = 1)
cormat <- as.matrix(cormat)
cormat<- round(cormat, 2)

#Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
    cormat[lower.tri(cormat)]<- NA
    return(cormat)
  }

upper_tri <- get_upper_tri(cormat)
melted_cormat <- melt(upper_tri, na.rm = TRUE)

#Heatmap
ggheatmap <- ggplot(data = melted_cormat, aes(Var1, Var2, fill = value)) +
    geom_raster() +
    scale_fill_gradient2(low = "#712B8D", high = "#F5EA14", mid = "#030203",
      midpoint = 0.7, limit = c(0.5,1), space = "Lab",name="Coefficient value") +
    theme_minimal() + # minimal theme
    theme(axis.text.x = element_blank()) +
    coord_fixed()

#Add correlation coefficients on the heatmap
corheatmap <- ggheatmap +
              geom_text(aes(Var1, Var2, label = value), color = "grey50", size = 3) +
              theme(
                    axis.title.x = element_blank(),
                    axis.title.y = element_blank(),
                    panel.grid.major = element_blank(),
                    panel.border = element_blank(),
                    panel.background = element_blank(),
                    axis.ticks = element_blank(),
                    legend.position = c(0.75, 0.1),
                    legend.direction = "horizontal") +
                    guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
                                  title.position = "top", title.hjust = 0.5)) +
                    labs(title="Spearman correlation matrix")

#Save and export plot
ggsave("Corr_Plot.png", plot = last_plot(), width = 10, height = 10, units = "cm", dpi = 300)

#Compute dendrogram
dend <- hclust(dist(cormat), method = "complete")
dend_plot <- ggdendrogram(dend) +
            labs(title="Cluster dendrogram")
ggsave("Dend_Plot.png", plot = dend_plot, width = 10, height = 10, units = "cm", dpi = 300)

#+END_SRC
[[./Data/gene_analysis/Corr_Plot.png]]
[[./Data/gene_analysis/Dend_Plot.png]]

** Top/Bottom loadings and GO analysis
*** (https://github.com/federicomarini/pcaExplorer)
#+begin_src R :session *R* :eval yes :exports code :tangle ./src/Gene_expression_analysis.R
#Used packages
library(DESeq2)
library(pcaExplorer)
library(DEFormats)
library(ggplot2)

setwd("~Data/Raw_Counts.txt") # Set working directory
count = read.table("Raw_Counts.txt", header=T, row.names = 1, sep="\t", check.names = FALSE) # Open Raw counts from featureCounts routine

#Group setup
Adult <- grep("Adult",colnames(count),ignore.case=T)
Infant <- grep("Infant",colnames(count),ignore.case=T)
Spring <- grep("Spring",colnames(count),ignore.case=T)
tHIO <- grep("tHIO",colnames(count),ignore.case=T)
group <- as.factor(c(rep("Spring",times=length(Spring)), rep("tHIO",times=length(tHIO)), rep("Infant",times=length(Infant)), (rep("Adult",times=length(Adult)))))
pheno = read.table("pheno.txt", header=T, row.names = 1, sep="\t")

#Create Large DGEList
dge = DGEList(count, group = group)
dge$samples$batch=pheno$batch
dge

#Create Large DESeqDataSet
dds = as.DESeqDataSet(dge)
dds = as.DESeqDataSet(dge, design=~ batch + group)
#vsd = vst(dds, blind=FALSE, fitType = "parametric") #Variance Stabilization Transformation
rld = rlogTransformation(dds) #rlogTransformation on DESeqTransform
dds <- DESeq(dds)
res <- results(dds)
annotation <- data.frame(gene_name = rownames(dds), row.names = rownames(dds), stringsAsFactors = FALSE)

#Compute PCA
pcaobj <- prcomp(t(assay(rld)))
pcascree(pcaobj,type="pev", title="Proportion of explained proportion of variance")
res_pc <- correlatePCs(pcaobj,colData(dds))

#Extract top 10 genes per top/bottom loadings in each PCs
#Fix(hi-loadings) i.e. barplot(geneloadings_extreme, las = 2, col = c(rep("#BD202E",
        topN), rep("#2E368E", topN)), main = paste0(title, "PC",
        whichpc))
#Plot and export image for PC1
png('Loadings_PC1.png', width = 800, height = 350)
hi_loadings(pcaobj, whichpc = 1, topN = 10,annotation = annotation)
dev.off()
#Plot and export image for PC2
png('Loadings_PC2.png', width = 800, height = 350)
hi_loadings(pcaobj, whichpc = 2, topN = 10,annotation = annotation)
dev.off()
#Plot and export image for PC3
png('Loadings_PC2.png', width = 800, height = 350)
hi_loadings(pcaobj, whichpc = 3, topN = 10,annotation = annotation)
dev.off()

#Compute limmaquickpca2go
library(org.Hs.eg.db)
goquick <- limmaquickpca2go(rld, pca_ngenes = 10000, inputType = "SYMBOL", organism = "Hs")
head(goquick$PC1$posLoad)
head(goquick$PC1$negLoad)
#repeat for each PCs

#+END_SRC
[[./Data/gene_analysis/Loadings_PC1.png]]
[[./Data/gene_analysis/Loadings_PC2.png]]
[[./Data/gene_analysis/Loadings_PC3.png]]

** GO Plot analysis
*** (http://wencke.github.io/)
**** Pathways enriched in tHIO+S compared to tHIO
#+begin_src R :session *R* :eval yes :exports code :tangle ./src/GOplot.R
library(GOplot)
#Import gene list and GO enrichment data from toppgene suite
#Pathways upregulated in tHIO+S
GO <- read.table("GO-Pathway.txt", sep = "\t", header = TRUE)
genelist <- read.table("genelist_thiospring-thio.txt", sep = "\t", header = TRUE)
circ <- circle_dat(GO, genelist)
genes <- read.table("selected_genes.txt", sep = "\t", header = TRUE)
process <- read.table("selected_process.txt", sep = "\t", header = TRUE)
process <- as.matrix(process)
chord <- chord_dat(circ, genes, process)
GOChord(chord, limit = c(2, 0),
              gene.order = 'logFC',
              ribbon.col = c("#F79420", "#FAAF41", "#F7EC33", "#FBF8CD", "#FFFFFF", "#EECDE1", "#6B52A1", "#D94397"),
              gene.space = 0.25,
              gene.size = 8,
              space = 0.02)
ggsave("GOPathway.png", plot = last_plot(), width = 40, height = 45, units = "cm", dpi = 200)

**** Biological processes uniquely enriched in tHIO+S compared to human jejunum
#+begin_src R :session *R* :eval yes :exports code :tangle ./src/GOplot.R
library(GOplot)
#Pathways upregulated in tHIO+S
GO <- read.table("tHIOS_unique_all.txt", sep = "\t", header = TRUE)
genelist <- read.table("genelist_tHIOSunique.txt", sep = "\t", header = TRUE)
circ <- circle_dat(GO, genelist)
genes <- read.table("genes.txt", sep = "\t", header = TRUE)
process <- read.table("Processes.txt", sep = "\t", header = TRUE)
process <- as.matrix(process)
chord <- chord_dat(circ, genes, process)
GOChord(chord, limit = c(2, 0),
              gene.order = 'logFC',
              ribbon.col = c("#F79420", "#FAAF41", "#F7EC33", "#FBF8CD", "#FFFFFF", "#EECDE1", "#6B52A1", "#D94397"),
              gene.space = 0.25,
              gene.size = 8,
              space = 0.02)
ggsave("GOtHIOS.png", plot = last_plot(), width = 40, height = 45, units = "cm", dpi = 200)
#+END_SRC
[[./Data/gene_analysis/GOPathway.png]]
[[./Data/gene_analysis/GOtHIOS.png]]
